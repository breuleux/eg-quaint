
require:
   opg ->
      Source, Location
   .lang ->
      parse
   .doc ->
      SeqDocument
   .ast ->
      QAst, Text, Oper, Seq, Into, Deferred
      raw
      shed, shedAll, shedIndent
      collapse, statements
      parseSpec, makeExtractor, extractor

provide:
   next
   may-fail
   raw, rawRelative, dedent, remove-leading-blank
   as-indented-block
   code
   parseSpec, makeExtractor, extractor
   extract, collapse, statements
   shed, shedAll, shedIndent
   mergeable
   normalize
   toJSON
   to-data
   leaf-raw
   leaf-data


next = Symbol{.next}

may-fail{f} =
   var errn = null
   try:
      f{}
   catch e:
      if e.quaint-unrecoverable:
         throw e
      Deferred with {engine, docs} ->
         if errn == null:
            docs.errors or= SeqDocument{}
            docs.errors.errn or= 0
            docs.errors.errn += 1
            errn = docs.errors.errn
         res =
            span.error %
               String{e}
               if docs.flags.get{"errors$dumped"}:
                  then: {
                     " "
                     a %
                        href = '#ERR{errn}'
                        '[#{errn}]'
                  }
                  else:
                     ""
               Into{.errors, e}
         res.error = e
         res.error.id = errn
         res

rawRelative{match x} =
   {=> location} ->
      {{_, c}, _} = location.linecol{}
      padding = [1..c each i -> " "].join{""}
      padding + location.text{}
   String? -> x
   else -> throw E.noraw{S'Cannot get a raw string from {x}.'}

dedent{x} =
   lines = x.split{"\n"}
   indents = lines each
      R"^( *)(?! |$)"! {_, pfx} -> pfx.length
      else -> continue
   min = Math.min{*indents}
   newlines.join{"\n"} where
      newlines = lines each line -> line.slice{min}

remove-leading-blank{x} =
   match x.split{"\n"}:
      {R"^ *$"? x, *rest} -> rest.join{"\n"}
      else -> x

as-indented-block{chain x} =
   raw-relative{@}
   dedent{@}
   remove-leading-blank{@}

code{engine, x} =
   Deferred with {path, documents} ->
      may-fail with ->
         res = engine.eval{raw{x}, env, x.location} or "" where
            env = {doc and documents = documents, = engine}
         match res:
            QAst? ->
               engine.gen{res}
            else ->
               res


extract{match} =
   Seq? {*args} ->
      Seq{args[1][0], *newargs} where newargs =
         enumerate{args} each
            {i, arg} when i mod 2 == 0 ->
               arg
   other ->
      other



mergeable{tag, child, block = true} =
   merge{match node} =
      [^tag %]! {tags, props, children} ->
         this.children ++= children
         this
      R"^[ \n\t]*$"? ->
         this.children.push{node}
         true
      other ->
         false
   node = ^tag % child
   node.block = block
   node.merge = merge
   node


blockElements = [object with elems.split{R"[\n ]+"} each x -> {x, true}] where
   elems = """
      address article aside audio
      blockquote
      canvas
      dd div dl
      fieldset figcaption figure footer form
      h1 h2 h3 h4 h5 h6 header hgroup hr
      main
      nav noscript
      ol output
      p pre
      section
      table tfoot
      ul
      video
      html head body link script
      raw top
   """

normalize{match node} =
   ENode? {tags => {.p}, props => == {=}, children => {R"^[\n ]*$"?} or {}} ->
      ""
   ENode? {tags => match tags, props => props == {=}, => children} ->
      {.p} ->
         ch = normalize{children}
         ch each
            ENode? {=> tags} when tags.some{t -> blockElements[t]} ->
               return ch
            else ->
               pass
         ENode{tags, props, ch}
      else ->
         ENode{tags, props, normalize{children}}
   Array? children ->
      var res = {}
      children each normalize! match ->
         Array? a -> res ++= a
         other -> res.push{other}
      res
   else ->
      node


toJSON{match v} =
   {=> raw} ->
      t = v.raw{}
      try:
         JSON.parse{t}
      catch e:
         if "{" in t or "[" in t:
            throw e
         t
   else ->
      v


data-ex = extractor with
   "\\key = \\value"
   "\\key := \\value"
   "\\key : \\value"
   "\\key => \\rawvalue"
   "* \\item"
   "# \\item"
   "[\\inner]"

leaf-raw{x} = x.raw{}

leaf-data{x} =
   match x.raw{}:
      "true" -> true
      "false" -> false
      "null" -> null
      R"^\".*\"$"? s -> JSON.parse{s}
      R"^-?\d+(\.\d*)?([eE\d-]+)?$"? s -> Number{s}
      s -> s

to-data{node, options = {=}} =

   options as {
      => use-map = false
      => leaf = x ->  x
      => let extractor = data-ex
      => var ignore-brackets = true
   }

   var result = null

   add-item{item} =
      if result === null:
         result = {}
      if not Array? result:
         throw E.quaint.data.inconsistent with
            "Inconsistent definition: some, but not all statements are list entries."
      else:
         result.push{to-data{item, options}}

   add-kv{key, value} =
      if use-map:
         if result === null:
            result = new Map{}
         if not Map? result:
            throw E.quaint.data.inconsistent with
               "Inconsistent definition: some, but not all statements are key/value pairs"
         else:
            result.set{to-data{key, options}, value}
      else:
         if result === null:
            result = {=}
         if not Object.get-prototype-of{result} === Object.prototype:
            throw E.quaint.data.inconsistent with
               "Inconsistent definition: some, but not all statements are key/value pairs"
         else:
            result[key.raw{}] = value

   var leaf-exists = false
   statements{shed{node}} each stmt ->
      f{stmt} where f{stmt} =
         match extractor{stmt}:
            {=> key, => value} ->
               add-kv{key, to-data{value, options}}
            {=> item} ->
               add-item{item}
            {=> inner} when ignore-brackets ->
               ignore-brackets = false
               f{inner}
            {=> key, => rawvalue} ->
               add-kv{key, leaf{rawvalue}}
            else ->
               leaf-exists = true

   if result === null:
      leaf{node}
   elif leaf-exists:
      throw E.quaint.data.inconsistent with
         "Inconsistent definition: some, but not all statements are leaf nodes"
   else:
      result

