
require:
   yargs
   .run
   deepmerge
   .run2 -> main
   engage
   path
   child_process
   .config ->
      merge-config
   filendir
   mkdirp
   "./setup" ->
      prompt, setup, setup-plugin
   format-json

get-arguments{} =

   argv = chain yargs:
      @usage{"Usage: quaint <file ...> [options]"}

      ;; --config, -c
      @alias{.c, .config}
      @nargs{.c, 1}
      @default{.c, "quaint.json"}
      @describe{.c, "Path to a configuration file with option values (must be JSON)"}

      ;; --data, -d
      @alias{.d, .data}
      @nargs{.d, 1}
      @describe{.d} with """
         JSON string or file(s) defining field:value pairs to be made available inside markup (as {field}):
         * key:value
         * {"key": value, ...}
         * filename.json
         * prefix::filename.json
      """.trim{}

      ;; --eval, -e
      @alias{.e, .eval}
      @nargs{.e, 1}
      @describe{.e, "Quaint string to parse directly"}

      ;; --format, -f
      @alias{.f, .format}
      @nargs{.f, 1}
      @describe{.f, "Format (only html currently supported)"}

      ;; --help, -h
      @alias{.h, .help}
      @help{.h}

      ;; --inline
      @describe{.inline, "Inline resources in the HTML"}

      ;; --out, -o
      @alias{.o, .out}
      @nargs{.o, 1}
      @describe{.o, "File or directory to save the output to"}

      ;; --plugin, -p
      @alias{.p, .plugin}
      @nargs{.p, 1}
      @describe{.p, """Plugin(s) to import:
         * Quaint file (injected at the beginning)
         * Path to JavaScript file
         * Local npm module
         * Global npm module"""}

      ;; --resources, -r
      @alias{.r, .resources}
      @describe{.r, "Directory where to put the resources"}

      ;; --resources-url
      @describe{"resources-url", "URL for the resources directory"}

      ;; --serve
      @default{.serve, false}
      @describe{.serve, "Start server on specified port, in output directory"}

      ;; --stdout, -s
      @alias{.s, .stdout}
      @boolean{.s}
      @default{.s, false}
      @describe{.s, "Print to standard out"}

      ;; --template, -t
      @alias{.t, .template}
      @nargs{.t, 1}
      @describe{.t, "Name of the default template to use"}

      ;; --template-directory
      @nargs{"template-directory", 1}
      @describe{"template-directory", "Template directory"}

      ;; --verbose, -v
      @alias{.v, .verbose}
      @boolean{.v}
      @describe{.v, "Print information about the operations performed"}

      ;; --setup
      @default{"setup", false}
      @describe{"setup", "Set up and configure a plugin."}

      ;; --save-meta
      @default{"save-meta", false}
      @describe{"save-meta", "Save meta data in a file (./meta.json if the file is not specified)"}

      ;; --watch, -w
      @alias{.w, .watch}
      @default{"watch", false}
      @describe{"watch", "Watch for changes to rebuild"}

      ;; TODO

      ;; ;; --save-config
      ;; @default{"save-config", false}
      ;; @describe{"save-config", "Save the given options in a JSON file (./quaint.json if the file is not specified)"}

      ;; ;; --dump-data
      ;; @default{"dump-data", true}
      ;; @describe{"dump-data", "Dump data provided with -d in a file (./data.json if the file is not specified)"}

      @example with
         "quaint myfile.q"
         "Translate to myfile.html"
      @example with
         "quaint file1.q file2.q file3.q -v"
         "Translate multiple files"
      @example with
         "quaint -e 'Quaint is __cool'"
         "Translate a literal"

      @example with
         "quaint -e 'Play {game}' -d 'game:chess'"
         "Fill data in"
      @example with
         "quaint article.q -d info.json"
         "Fill data in from a file"

      @example with
         "quaint -e '2+2={2+2}' -p javascript"
         "Using the quaint-javascript plugin"
      @example with
         "quaint file1.q file2.q -p prelude.q"
         "Prepend prelude to each file"

      @example with
         "quaint file.q -t tpl"
         "Use template ./tpl.q"
      @example with
         "quaint -e 'B' -t 'A {body} C'"
         "Inline template, prints out A B C"
      @example with
         "quaint -e '[template::tpl]BODY'"
         "Use template ./tpl.q"
      @example with
         "quaint -e '[template::tpl]BODY' -t templates/"
         "Use template ./templates/tpl.q"

      @check with {argv} ->
         ;; if not argv.e and not argv._.length:
         ;;    throw E.usage with
         ;;       "You must provide one or more filenames, or a string with the -e option."
         if argv.e and argv._.length:
            throw E.usage with
               "You cannot translate a file if the -e option is used."
         if argv.s and argv.o:
            throw E.usage with
               "You cannot combine the options -s and -o."
         true

      @argv


reload-bin-path = path.join{__dirname, '../node_modules/reload/bin/reload'}

async commit-setup{config, instructions, filename} =
   filendir.write-file-sync{filename, format-json.plain{config}}
   instructions each
      #mkdir{dir} ->
         mkdirp.sync{dir}
      #write{file, contents} ->
         filendir.write-file-sync{file, contents}

async execute-setup{initial-config, filename} =
   {=> let config, => instructions} = await setup{initial-config}
   commit-setup{config, instructions, filename}

async provide{} =
   try:
      argv = get-arguments{}

      config-file = argv.config

      require: fs
      config-exists = fs.exists-sync{config-file}

      cfg = merge-config with
         if config-exists:
            then: JSON.parse{fs.read-file-sync{"quaint.json", .utf8}}
            else: {=}
         argv
      cfg._config-file = config-file
      cfg._config-exists = config-exists

      if argv.setup:
         match argv.setup:
            String? when not config-exists ->
               print "Please create or specify a configuration file."
            String? plugin-name ->
               instructions = {}
               await setup-plugin{plugin-name, cfg, instructions}
               commit-setup{cfg, instructions, config-file}
            else ->
               await execute-setup{cfg, config-file}
         return
      elif cfg.sources.length === 0 and not cfg._eval and not config-exists:
         {=> create} = await prompt with {
            name = .create
            message = 'The configuration file "{config-file}" does not exist, do you wish to create it?'
            type = .confirm
            default = true
         }
         if create:
            await execute-setup{null, config-file}
         return

      server-out = cfg.nominal-output
      server-start-page = path.join{cfg.site-root or "", cfg.server.start-page}

      engage{main, opts & if{cfg._print, {log{} = pass}, {=}}}.run{} where
         opts = {
            config = cfg
            argv = argv
            paths = {
               root = "."
               content = cfg.content-root or "."
               output = cfg.output
            }
            show = {
               read = false
               write = false
               task = cfg.verbose
            }
            clean = true
            ignore-empty-changes = true
            watch = cfg.watch
         }

      if cfg.server.enable:
         filendir.write-file-sync{p, text} where
            p = path.join{cfg.nominal-output, ".quaint-server-entry-point.html"}
            text = '''<meta http-equiv="refresh" content="0; URL='{server-start-page}'" />'''
         child_process.spawn{reload-bin-path} with
            {
               "-d", server-out
               "-p", cfg.server.port
               "-r", cfg.server.delay
               ;; "-s", server-start-page
               "-s", ".quaint-server-entry-point.html"
               "-b", cfg.server.open-browser
            }
            {stdio = .inherit}

      ;; run{get-arguments{}}

   catch [E.usage-error? e]:
      yargs.show-help{}
      console.error{e.message}
      process.exit{1}
   catch [E.cli-error? e]:
      console.error with e.message
      if Error? e[0]:
         console.error with '\n{e[0].stack}'
   catch e:
      console.error with e.stack

