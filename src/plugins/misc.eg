
require:
   ..tools ->
      raw, shed, shed-all, extractor, toJSON
      to-data, leaf-data
   .common ->
      analyze-path
   ..doc ->
      SeqDocument


provide:
   install


install{@} =
   @register-documents with {
      head = SeqDocument{}
   }

   @register-macros with {

      path{engine, pathname >> pathname.shed{}.raw{}} =
         ;; FIXME: implementation is buggy if old-path is inside url but before
         ;; the end of the string
         m{x} = engine.documents.meta.get{x}
         old-path = m{.path} or "unknown.html"
         {
            engine.into{.meta, {.path, pathname}}
            engine.into{.meta, {.url, m{.url}.replace{old-path, pathname}}}
            engine.into{.meta, {.local-url, m{.local-url}.replace{old-path, pathname}}}
         }

      head{engine, body} =
         engine.into{.head, engine.gen{body}}

      plugins{engine, body} =
         load{name, match options} =
            false? ->
               ;; plugin is off
               pass
            else ->
               p = engine.read-resource{.plugin, name, fallback-to-default = false}
               p{engine, if{options === true, {=}, options}}

         match to-data{body, {leaf = leaf-data}}:
            String? ps ->
               ps.split(R"[\n, ]+") each name ->
                  if name:
                     load{name, true}
            Array? ps ->
               ps each name ->
                  load{name, true}
            items! ps ->
               ps each {name, options} -> load{name, options}
         ""

      plugin{engine, raw! name, values} =
         p = engine.read-resource{.plugin, name, fallback-to-default = false}
         options = to-data{values, {leaf = leaf-data}}
         p{engine, options}
         ""

      resources{engine, *[{shed! raw! m, body} or {body} and m is "head"]} =
         body.statements{} each stmt ->
            let path = stmt.raw{}
            @register-resources with {
               path => analyze-path{path}
            }
         ""
   }

