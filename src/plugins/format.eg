
require:
   ..tools ->
      raw, shed, may-fail

provide:
   install
   Format


class Format:

   constructor{} =
      @parsers = {=}
      @formatters = clone{default-formatters}

   format{engine, type, body} =
      form = @formatters[type]
      if not form:
         throw E.no-format with
            'Cannot format as "{type}". You probably need to load a plugin.'
      engine.redefer{engine.gen{body}} with {data} ->
         form{engine, data}


auto-format{engine, match obj} =
   Array? ->
      ul %
         obj each entry ->
            li % auto-format{engine, entry}

   String? or Number? or Boolean? or null? or undefined? ->
      engine.gen-from-source{String{obj}}

   else ->
      table %
         items{obj} each {k, v} ->
            tr %
               td % auto-format{engine, k}
               td % auto-format{engine, v}


detect-columns{list} =
   if not Array? list:
      return false
   counts = {=}
   var len = 0
   list each match entry ->
      Array? entry ->
         if keys{counts} != {}:
            return false
         if entry.length > len:
            len = entry.length
      when len > 0 ->
         return false
      String? or Number? or Boolean? or null? or undefined? ->
         return false
      items! things ->
         things each {k, v} ->
            counts[k] or= 0
            counts[k] += 1
      else ->
         return false
   len or keys{counts}

make-table{engine, ks, rows and detect-columns! match} =
   false? ->
      false
   Number? ->
      table %
         zip{rows, ks or {}} each {row, key} ->
            tr %
               if{key, td % key, ""}
               row each entry ->
                  td % auto-format{engine, entry}
   Array? columns ->
      table %
         tr %
            if{ks, th % "", ""}
            columns each col -> th % col
         zip{rows, ks or {}} each {row, key} ->
            tr %
               if{key, td % key, ""}
               columns each col ->
                  td % auto-format{engine, row[col] or ""}


default-formatters = {

   auto{engine, obj} =
      auto-format{engine, obj}

   list{engine, obj} =
      auto-format{engine, obj}

   table{engine, match obj} =
      Array? ->
         make-table{engine, null, obj} or
            throw E.format.table with
               'The object cannot be formatted as a table.' +
               \ ' The rows may not be regular enough.'
      else ->
         make-table{engine, keys{obj}, items{obj} each {k, v} -> v} or
            auto-format{engine, obj}
}


install{@} =
   fmt = Format{}
   @register-macros with {
      format{engine, *[{shed! raw! descr, body} or {body} and descr is "auto"]} =
         may-fail with ->
            fmt.format{engine, descr, body}
   }
   @macros.format.parsers = fmt.parsers
   @macros.format.formatters = fmt.formatters
