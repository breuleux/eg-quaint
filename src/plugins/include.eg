
require:
   opg -> Source
   ..tools ->
      may-fail

provide:
   install
   Include
   Data


class Base:

   constructor{@type, @extensions} =
      pass

   process{engine, ext, file, contents} =
      fn = @extensions[ext]
      if not fn:
         throw E.no-reader{'Do not know how to read "{file}" with format "{ext}"'}
      fn{engine, file, contents}

   parse{ext, contents} =
      @process{null, ext, "<inline>", contents}

   read{engine, match ext, body} =
      null? ->
         var e = engine
         rb = body.raw??{} or body
         filenames = rb.split{R"[ \n,]+"} each x when x !== "" -> x
         results = filenames each match filename ->
            R"\.([a-zA-Z0-9]+)$"! {_, ext} or ext is "q" ->
               match engine.read-resource{@type, filename}:
                  String? contents or {=> contents} ->
                     @process{engine, ext, filename, contents}
                  else ->
                     throw E.bad-resolver{'Bad resolution for "{filename}"'}
         match results:
            {x} -> x
            else -> results
      else ->
         @process{engine, ext, "<inline>", tools.as-indented-block{body}}


class Include < Base:
   constructor{} =
      @type = .include
      @extensions = clone{default-extensions}


class Data < Base:
   constructor{} =
      @type = .data
      @extensions = clone{default-data-extensions}


default-extensions = {
   q{engine, file, contents} =
      engine.gen-from-source{Source{contents, file}}
   html{engine, file, contents} =
      raw % contents
   json{engine, file, contents} =
      engine.setenv{JSON.parse{contents}}
      ""
}

default-data-extensions = {
   json{engine, file, contents} =
      JSON.parse{contents}
}


install{@} =

   incl = Include{}
   @register-macros with {
      include{engine, *[{ext, body} or {body} and ext is null]} =
         may-fail with ->
            incl.read{engine, ext??.raw{}, body}
   }
   @macros.include.extensions = incl.extensions
   @macros.include.read{*args} = incl.read{*args}
   @macros.include.process{*args} = incl.process{*args}
   @macros.include.parse{*args} = incl.parse{*args}

   dat = Data{}
   @register-macros with {
      data{engine, *[{ext, body} or {body} and ext is null]} =
         may-fail with ->
            dat.read{engine, ext??.raw{}, body}
   }
   @macros.data.extensions = dat.extensions
   @macros.data.read{*args} = dat.read{*args}
   @macros.data.process{*args} = dat.process{*args}
   @macros.data.parse{*args} = dat.parse{*args}


