
require:
   .util -> transform

provide:
   collapse
   inherit
   merge-children
   enode-to-data
   trim


inherit{node, tags, props, children} =
   rval = ENode{tags, props, children}
   if node.merge: rval.merge = node.merge
   if node.block: rval.block = node.merge
   rval

trim{match node} =
   Array? ->
      res = node each
         R"^[ \n]+$"? x -> continue
         x -> x
      match res:
         {x} -> x
         else -> res
   else ->
      node

collapse{match node, finalize = null} =

   ENode? {tags => {}, props => == {=}, => children} or Array? children ->
      fn{*match} =
         {String? s, String? t} ->
            #replace{s + t}
         {x, ENode? {tags => {}, props => == {=}, => children} or Array? children} ->
            #splice{*children}
         {x, y} ->
            #push{collapse{y}}
      r = transform{children, fn, ""}
      if finalize:
         r each x -> finalize{x}
      else:
         r

   ENode? {=> tags, => props, => children} ->
      inherit{node, tags, props, collapse{children}}

   else -> node


merge-children{match node, recursive = true, finalize = null} =
   Array? ->
      children = collapse{node, finalize}
      if children.length > 1:
         new-children = {}
         {var last, *rest} = children
         push{} =
            new-children.push{last}
         rest each match child ->
            when last and last.merge ->
               match last.merge{child} as new-child:
                  false? ->
                     push{}
                     last = child
                  else ->
                     pass
            else ->
               push{}
               last = child
         push{}
         if recursive:
            new-children each child -> merge-children{child, recursive, finalize}
         else:
            new-children
      elif recursive:
         children each child -> merge-children{child, recursive, finalize}
      else:
         children
   ENode? ->
      new-children = merge-children{node.children, recursive, finalize}
      inherit{node, node.tags, node.props, new-children}
   else ->
      node


enode-to-data{match node, use-map = false} =

   do:
      make{} = if{use-map, new Map{}, {=}}
      put{o, k, v} = if{use-map, o.set{k, v}, o[k] = v}

   [ul %]? or [ol %]? ->
      node.children each match child ->
         [li %]? -> child.children
         else -> continue

   [dl %]? ->
      result = make{}
      var key = ""
      node.children each match child ->
         [dt %]? ->
            key = match child.children:
               {x} -> x
               xs -> xs
         [dd %]? ->
            put{result, key, child.children}
         else ->
            continue
      result

   [table %]? ->
      columns = {}
      var row-num = 0
      rows = node.children each match row ->
         [tr %]? ->
            row-num += 1
            row.children each match child ->
               [th %]? when row-num !== 1 ->
                  throw E.enode-conversion{"th elements should only be in the first row"}
               [th %]? ->
                  columns.push{String{child.children}}
                  null
               [td %]? ->
                  child.children
               else -> continue
         else ->
            continue
      if columns.length !== 0:
         rows.slice{1} each row ->
            rval = make{}
            zip{columns, row} each {name, x} -> put{rval, name, x}
            rval
      else:
         rows

   do:
      f{children} =
         var candidate = null
         merge-children{children, false} each match child ->
            R"[ \n\t]+"? -> pass
            when candidate ->
               throw E"each"{"Cannot run each:: on this data."}
            else ->
               candidate = child
         enode-to-data{candidate, use-map}

   ENode? {tags => {}, props => == {=}} when not node.block ->
      f{node.children}

   Array? ->
      f{node}

   ENode? ->
      throw E.enode-conversion{"Cannot convert element to data"}

   else ->
      node

