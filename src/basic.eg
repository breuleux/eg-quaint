

require:
   opg ->
      transferLocation as [<<:]
   "./tools" as tools ->
      parseSpec, makeExtractor, extractor
      raw, extract, collapse, statements
      shed, shedAll, shedIndent
      mergeable
   "./doc" ->
      SeqDocument, MapDocument
   "./util" ->
      insertSorted
   "./engine" ->
      Engine

provide:
   basicPlugin


requireWide{f}{engine, data} =
   if data._wide:
      f.call{this, engine, data}
   else:
      tools.next

headerRule{level}{engine, {=> x}} =
   gx = engine.gen{x}
   lbl = raw{x}.replace{R.g"\W", ""}.toLowerCase{}
   rval =
      ^[S'h{level}'] %
         id = lbl
         gx
         genfor %
            document = .sections
            {level, gx, lbl}
   rval &: {block = true}


class BasicEvaluator:
   constructor{@store = Object.create{null}} =
      pass
   eval{key, env = {=}, loc = null} =
      s = Object.create{@store} &: env
      if not Object.hasProperty.call{s, key}:
         throw E.not_in_environment{key}
      s[key]
   setenv{key, value} =
      @store[key] = value
   withenv{env} =
      newstore = Object.create{@store}
      newstore &: env
      BasicEvaluator{newstore}



litPlugin = {
   documents{} = {
      sections = SeqDocument{}
   }

   evaluator = BasicEvaluator

   regexps{} = {
   }

   rules{} = {
      "{\\x}"{engine, {=> x}} =
         tools.code{engine, x}
   }
}


basicPlugin = {

   documents{} = {
      meta = MapDocument{}
      sections = SeqDocument{}
   }

   evaluator = BasicEvaluator

   env{} = {

      css{engine, shed! body} =
         style[raw] % raw{body}

      html{engine, shed! body} =
         raw % raw{body}

      toc{engine, body} =
         genfrom %
            generate{path, docs} =
               rval = [ul.toc %]
               stack = {}
               var cnode = rval
               var clvl = -1
               docs.sections.entriesAfter{path} each {match, title, lbl} ->
                  do:
                     link = a %
                        href = S'#{lbl}'
                        title
                  level == clvl or [level when clvl == -1] ->
                     clvl = level
                     cnode.children.push with li % link
                  level > clvl ->
                     newnode = ul % li % link
                     cnode.children.push{newnode}
                     stack.push with {clvl, cnode}
                     {clvl, cnode} = {level, newnode}
                  level < clvl ->
                     while level < clvl:
                        {clvl, cnode} = stack.pop{}
                     cnode.children.push{li % link}
               rval

      meta{engine, match body} =
         #text{.dump} ->
            genfrom %
               generate{path, docs} =
                  print consume{docs.meta.entries{}}
                  table % docs.meta.entries{} each
                     {k, v} -> tr %
                        td % k
                        td % engine.gen{v}
         else ->
            ex = extractor{"\\key = \\value"}
            ENode{{.genfor}, {document = .meta}} with
               statements{body} each ex! {=> key, => value} ->
                  {raw{key}, value}

   }

   regexps{} = {
   }

   rules{} = {

      "[\\maybe\\x]"{engine, {_node => #seq{_, o, x, c, _}}} =
         beg = raw{o}.replace{"[", ""}
         middle = engine.gen{x}
         end = raw{c}.replace{"]", ""}
         res =
            if beg or end or middle.block:
               % [beg, middle, end]
            else:
               middle
         if middle.block:
            res &: {block = middle.block}
         res

      "{\\x}"{engine, {=> x}} =
         tools.code{engine, x}

      "\\fn :: \\maybe\\body"{engine, {=> fn, => body}} =
         try:
            f = engine.eval{raw{fn}, {=}, fn.location}
            f{engine, body} or ""
         catch e:
            span.error % String{e}

      "_ \\x"{engine, {=> x}} =
         em % engine.gen{x}

      "__ \\x"{engine, {=> x}} =
         strong % engine.gen{x}

      "& \\x"{engine, {x => shed! x}} =
         code % raw{x}

      "\\label @@ \\url"{engine, {=> label, url => shed! url}} =
         leng = Engine{litPlugin, false}
         leng.evaluator = engine.evaluator.withenv{{=}}
         a %
            href = leng.gen{url}
            engine.gen{label}

      "\\label @@ image : \\url"{engine, {=> label, url => shed! url}} =
         leng = Engine{litPlugin, false}
         leng.evaluator = engine.evaluator.withenv{{=}}
         img %
            src = leng.gen{url}
            alt = engine.gen{label}

      "\\url @@ image"{engine, {url => shed! url}} =
         leng = Engine{litPlugin, false}
         leng.evaluator = engine.evaluator.withenv{{=}}
         img % src = leng.gen{url}

      requireWide! "\\descr % \\maybe\\contents"{engine, var {=> descr, => contents}} =
         leng = Engine{litPlugin, false}
         leng.evaluator = engine.evaluator.withenv{{=}}

         ex = extractor{"\\key = \\value"}
         props = {=}
         stmts = statements{contents} each
            ex! {key => raw! key, => value} ->
               props[key] = leng.gen{value}
               continue
            stmt ->
               stmt
         children =
            if props != {=}:
               [% stmts each stmt -> engine.gen{stmt}].join{"\n"}.children
            else:
               {engine.gen{shedIndent{contents}}}

         parts = raw{descr}.split{R"[ +]|(?=\.|#)"}
         var id = null
         tags = {}
         parts each
            "" ->
               pass
            R"^#(.*)"! {_, _id} ->
               id = _id
            tag ->
               tags.push with tag
         if id: props.id = id
         ENode{tags, props, children}

      requireWide! "= \\x" = headerRule{1}
      requireWide! "== \\x" = headerRule{2}
      requireWide! "=== \\x" = headerRule{3}
      requireWide! "==== \\x" = headerRule{4}
      requireWide! "===== \\x" = headerRule{5}
      requireWide! "====== \\x" = headerRule{6}

      requireWide! "# \\x"{engine, {=> x}} =
         mergeable{.ol, li % engine.gen{x}}

      requireWide! "* \\x"{engine, {=> x}} =
         mergeable{.ul, li % engine.gen{x}}

      requireWide! "+ \\x"{engine, {=> x}} =
         args = collapse{"+", x}
         mergeable{.table} with
            tr %
               args each arg ->
                  th % engine.gen{arg}

      requireWide! "| \\x"{engine, {=> x}} =
         args = collapse{"|", x}
         mergeable{.table} with
            tr %
               args each arg ->
                  td % engine.gen{arg}

      "\\rule => \\body"{engine, {rule => shed! raw! rule
                                  body => shed! shedIndent! body}} =
         spec and {top, tree, specificity} = parseSpec{rule}
         match tree:
            #put ->
               throw E.too_general{rule}
            #eq{#text{name}} ->
               engine.setenv{name, body}
            else ->
               engine.register{spec} with {engine, values} ->
                  ;; env = object with items{values} each
                  ;;    {k, v} when not k.startsWith{._} ->
                  ;;       {k, engine.gen{v}}
                  ;; engine.withenv{env}.gen{body}
                  engine.withenv{values}.gen{body}
         ""

      ;; newline rule is a bit more complicated
      newlineRule = {spec, fn} where

         filter{match node} =
            extract! #seq{"NL", *args} ->
               {args = args}
            else ->
               false

         spec = {"NL", #fn{filter}, 1}

         fn{engine, {_node => node and #seq{*elems}, => args}} =
            results = {}
            wide = node.width == .wide
            var last = null
            _gen = engine.gen.bind{engine}
            var i = -3

            add{addblank = true} =
               results.push with
                  match last:
                     [div %]? or {block => true?} ->
                        last
                     != "" when wide ->
                        p % last
                     else ->
                        last
               if addblank:
                  results.push with
                     raw{elems[i]}

            var isFirst = true
            args each [_gen! match] ->
               do:
                  i += 2
               x when isFirst ->
                  isFirst = false
                  last = x
               x when last and last.merge ->
                  match last.merge{x}:
                     false? ->
                        add{}
                        last = x
                     newx ->
                        last = newx
               x ->
                  add{}
                  last = x
            i += 2
            if last:
               add{false}

            match results:
               {result} ->
                  result
               else ->
                  [% results] &: {block = Boolean! wide}

   }
}
