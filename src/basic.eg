
require:
   .tools ->
      raw, may-fail, extract
   .doc ->
      SeqDocument, MapDocument
   .ast ->
      QAst, Text, Oper, Seq
      Deferred
   .plugins

provide:
   basic-plugin
   core-plugin
   lit-plugin


basic-plugin{@} =
   core-plugin{@}
   plugins.install{@}


lit-plugin{@} =
   @clear-rules{}
   @register-rules with {
      "{\\x}"{engine, {=> x}} =
         tools.code{engine, x}
   }


core-plugin{@} =

   @register-documents with {
      flags = MapDocument{}
      errors = SeqDocument{}
   }

   @register-methods with {
      method lit{} =
         p = @fork-plug{litPlugin}
         p.evaluator = @evaluator
         p
      method litgen{x} =
         @lit{}.gen{x}
   }

   @register-rules with {

      "\\maybe\\x ;; \\ignore"{engine, {=> x}} =
         engine.gen{x}

      "[\\maybe\\x]"{engine, {_node => Seq? {_, o, x, c, _}}} =
         beg = raw{o}.replace{"[", ""}
         middle = engine.gen{x}
         end = raw{c}.replace{"]", ""}
         res =
            if beg or end:
               % [beg, middle, end]
            elif middle.block:
               % middle
            else:
               middle
         if middle.block:
            res &: {block = middle.block}
         res

      "{\\x}"{engine, {=> x}} =
         tools.code{engine, x}

      "\\fna :: \\maybe\\body"{engine, {=> fna, => body}} =
         may-fail with ->
            {fn, *args} =
               match fna:
                  extract! Seq? {"J", *args} ->
                     args
                  else ->
                     {fna}
            rf = raw{fn}
            if engine.macros[rf] as f:
               f{engine, *args, body} or ""
            else:
               Deferred with {path, documents} ->
                  may-fail with ->
                     f2 = engine.eval{rf, {=}, fn.location}
                     f2.apply{null, {engine, *args, body}} or ""

      ;; newline rule is a bit more complicated
      newlineRule = {spec, fn} where

         filter{match node} =
            extract! Seq? {"NL", *args} ->
               {args = args}
            else ->
               false

         spec = {"NL", #fn{filter}, 1}

         fn{engine, {_node => node and Seq? {*elems}, => args}} =
            wide = node.width == .wide
            results = enumerate{elems} each {match i, elem} ->
               when [i mod 2] === 0 ->
                  match engine.gen{elem} as x:
                     {block => true?} ->
                        x
                     ENode? ->
                        if not wide
                           \ or x.tags.some{tag -> tag === "div"}
                           \ or x.tags.length > 0 and x.tags.every{tag -> R"^[.#]"? tag}:
                           x
                        elif wide:
                           p % x
                        else:
                           x
                     R"^[ \n\t]*$"? ->
                        x
                     when wide ->
                        p % x
                     else ->
                        x
               else ->
                  raw{elem}
            match results:
               {result} ->
                  result
               else ->
                  [% results] &: {block = Boolean! wide}
   }
