
require:
   inquirer-shortcuts as inq
   child_process
   chalk
   path
   fs
   module

provide:
   setup
   default-setup
   setup-plugin
   install-plugin
   PluginResolver

sleep = promisify with {d, f} -> setTimeout.call{null, f, d}


;;;;;;;;;;;;;;;;;;;;;;;
;; Plugin resolution ;;
;;;;;;;;;;;;;;;;;;;;;;;

class PluginResolver:

   constructor{@use-global = true} =
      @m = @module-here{}
      @added-global-path = false

   module-here{} =
      m = new module{}
      m.filename = process.cwd{}
      c = process.cwd{}.split{"/"}
      m.paths = xs.reverse{} where xs = [1..c.length] each i ->
         c[...i].join{"/"} + "/node_modules"
      (process.env.QUAINT_MODULES or "").split(":") each entry when entry ->
         m.paths.push(entry)
      ;; Push global npm path
      if @use-global:
         m.paths.push with
            "/usr/local/lib/node_modules"
            "/usr/lib/node_modules"
      m

   r{p} =
      x = module._load{p, @m, true}
      x??.quaint-plugin or x

   rn{p} =
      try:
         module._load{p, @m, true}
      catch e:
         null

   r2{name} =
      if @added-global-path or not @use-global:
         @r{name}
      else:
         try:
            @r{name}
         catch e:
            ;; If all else fails (this is a bit slow, which is why we don't do it
            ;; if we don't have to)
            if (gpath = child_process.spawn-sync{"npm", {.root, "-g"}}.stdout):
               @m.paths.push{gpath.to-string{}.trim{}}
               @added-global-path = true
            @r{name}

   try-require{orig, match names, all = names} =
      {} ->
         rqs = [all each name -> '"{name}"'].join{", "}
         e = E.plugin-not-found with
            'Could not find a plugin for "{orig}".\nI tried requiring the following modules: {rqs}.\nTry running the following command to install the {orig} plugin locally:\n  npm install quaint-{orig} --save'
         e.plugin-name = orig
         e.quaint-unrecoverable = true
         throw e
      {name, *rest} ->
         try:
            @r2{name}
         catch e:
            if e.message == 'Cannot find module \'{name}\'':
               @try-require{orig, rest, all}
            else:
               throw e
               ;; throw E.cli-error with
               ;;    'An error happened when loading module \'{name}\''
               ;;    e



;; now = new Date{}

;; zpad{String! var s, length} =
;;    while s.length < length:
;;       s = '0' + s
;;    s


resolver = PluginResolver{false}


async install-plugin{name} =
   real-name = if{R"^(quaint-|\.|/|@)"? name, name, 'quaint-{name}'}
   try:
      {real-name, resolver.r{real-name}}
   catch e when e.code === "MODULE_NOT_FOUND":
      print 'Package {chalk.bold{real-name}} is not installed locally. Installing...'
      if not fs.exists-sync{"package.json"}:
         fs.write-file-sync{"package.json", "{}"}
      result = child_process.spawn-sync{"npm", {"install", real-name, "--save"}}
      await sleep{100}
      match result.status:
         0 ->
            print result.stdout.to-string{}
            {real-name, resolver.r{real-name}}
         1 ->
            print result.stderr.to-string{}
            print 'Could not install {chalk.bold{real-name}}.'
            {real-name, null}


async setup-plugin{name, config, instructions} =
   {real-name, plugin} = await install-plugin{name}
   if plugin:
      simple-name = name.replace{R"^quaint-", ""}
      if plugin.quaint-setup:
         config.plugins[simple-name] or= {=}
         await plugin.quaint-setup{config, instructions}
         print 'Plugin {chalk.bold{name}} successfully configured!'
      elif resolver.rn{'{real-name}/quaint-setup'} as qsetup:
         config.plugins[simple-name] or= {=}
         await qsetup{config, instructions}
         print 'Plugin {chalk.bold{name}} successfully configured!'
      else:
         print 'Using plugin {chalk.bold{name}}'
         config.plugins[simple-name] or=
            plugin.quaint-default-config or {=}


empty-config = {
   content-root = null
   sources = null
   files = null
   templates = {
      root = null
      default = null
   }
   output = null
   resources = {
      root = null
      files = {=}
   }
   hostname = null
   site-root = null
   server = {
      enable = null
      start-page = "index.html"
      port = 9137
   }
   watch = null
   plugins = {=}
}

default-config = {
   content-root = .content
   sources = {"**/*.q"}
   files = {.assets}
   templates = {
      root = .templates
      default = null
   }
   output = .output
   resources = {
      root = .resources
      files = {=}
   }
   hostname = null
   site-root = null
   server = {
      enable = true
      start-page = "index.html"
      port = 9137
   }
   watch = true
   plugins = {=}
}



async default-setup{} =
   config = clone{default-config}
   instructions = {
      #mkdir{config.content-root}
      #mkdir{config.output}
      #mkdir{config.templates.root}
      #mkdir{path.join{config.content-root, config.files[0]}}
   }
   setup{config, instructions, false}


async setup{var config = null
            var instructions = null
            prompt-files = true} =

   config or= clone{empty-config}
   instructions or= {}

   ;;;;;;;;;;;;;;;;;
   ;; Directories ;;
   ;;;;;;;;;;;;;;;;;

   if not config.content-root:
      content-root = await inq.input{"Source directory:"
                                     {default = default-config.content-root}}
      config &: {
         = content-root
         sources = default-config.sources
      }
      instructions.push with #mkdir{content-root}

   if not config.output:
      output = await inq.input{"Output directory:"
                               {default = default-config.output}}
      config.output = output
      instructions.push with #mkdir{output}

   if not config.templates.root:
      template-root = await inq.input{"Template directory:"
                                      {default = default-config.templates.root}}
      config.templates.root = template-root
      instructions.push with #mkdir{template-root}

   if not config.files:
      assets-root = await inq.input with
         "Assets directory (source subdirectory):"
         {default = default-config.files[0]}
      config.files = {assets-root}
      instructions.push with #mkdir{path.join{config.content-root, assets-root}}

   if not config.resources.root:
      resources-root = await inq.input with
         "Resources directory (output subdirectory):"
         {default = default-config.resources.root}
      config.resources.root = resources-root

   ;;;;;;;;;;;;;;
   ;; hostname ;;
   ;;;;;;;;;;;;;;

   if not config.hostname:
      hostname = await inq.input with
         "Where will the pages be hosted?"
         {default = "http://localhost/"}
      config &:
         match hostname:
            R"^([a-z]+://)?([^/]+)/?(.*)$"! {_, protocol, host, match root} ->
               do: let hostname = [protocol or "http://"] + host
               false? -> {= hostname, site-root = "/"}
               R"/$"? -> {= hostname, site-root = root}
               else -> {= hostname, site-root = root + "/"}

   ;;;;;;;;;;;;;;;;;;;;;;;
   ;; Configure plugins ;;
   ;;;;;;;;;;;;;;;;;;;;;;;

   install = await inq.confirm{"Install plugins?", {default = true}}

   if install:
      url = "http://breuleux.github.io/quaint/plugins/index.html"
      print '\nYou can consult the plugin list at this address:'
      print chalk.bold.cyan{url}

      while true:
         print ""
         name = await inq.input{"Install plugin (<Enter> to finish):"}
         if name.trim{} === "":
            print "\nDone installing plugins."
            break
         await setup-plugin{name, config, instructions}
   
   ;;;;;;;;;;;;;
   ;; Create? ;;
   ;;;;;;;;;;;;;

   recipes = {
      'index.q' => {
         dir = config.content-root
         message = "a page to start with"
         ;; value = scaffold-index
      }
      'default.q' => {
         dir = config.templates.root
         message = "a template"
         ;; value = scaffold-template
      }
      'style.css' => {
         dir = config.content-root
         message = "a global stylesheet"
         ;; value = scaffold-style
         resources = {"style.css"}
      }
      'script.js' => {
         dir = config.content-root
         message = "a global script"
         ;; value = scaffold-script
         resources = {"script.js"}
      }
   }

   config.templates.default or= "@minimal"

   items{recipes} each {key, value} ->
      p = path.join{value.dir, key}
      if fs.exists-sync{p}:
         continue
      result =
         if prompt-files:
            await inq.confirm with
               'Do you want me to create {value.message}: {p}?'
               {default = true}
         else:
            ;; print 'Creating {value.message}: {p}'
            true
      if result:
         ;; var text = value.value
         var text = fs.read-file-sync{path.join{__dirname, "..", "scaffold", key}, .utf8}
         if key === "default.q":
            result2 =
               if prompt-files:
                  await inq.confirm with
                     "Do you want to use it as a default template?"
                     {default = true}
               else:
                  true
            text = text.replace{"@minimal", config.templates.default}
            if result2:
               config.templates.default = key.replace{R".q$", ""}
         instructions.push with #write{p, text}
         [value.resources or {}] each f ->
            config.resources.files[f] = f

   if config.watch === null:
      config.watch = await inq.confirm with
         'Should the quaint command watch by default?'
         {default = true}

   if config.watch and config.server.enable === null:
      serve = await inq.confirm with
         'Should the quaint command start a server by default?'
         {default = true}
      config.server.enable = serve
      if config.server.enable:
         print 'The server port is {chalk.bold{config.server.port}}.'

   {= config, = instructions}
