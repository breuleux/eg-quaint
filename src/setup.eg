
require:
   inquirer-promise as inq
   child_process
   chalk
   path
   .run -> PluginResolver
   fs

provide:
   setup
   setup-plugin


now = new Date{}

zpad{String! var s, length} =
   while s.length < length:
      s = '0' + s
   s


scaffold-index = '''
meta ::
  title = Index
  author = Your name
  date = {now.get-full-year{}}-{zpad{now.get-month{} + 1, 2}}-{zpad{now.get-date{}, 2}}

Write some text here.

Syntax reference @@ http://breuleux.github.io/quaint/syntax.html
'''

scaffold-template = '''
template :: @minimal
= meta :: title
\{body\}
'''

scaffold-style = '''
/*
This stylesheet will be included automatically by all pages.
To import more stylesheets, go in quaint.json and add them to the resources.files list.

CSS files are not copied automatically, so @import will not work.

A stylesheet can be imported on a per-page basis with this statement:
resources :: style.css
*/
'''

scaffold-script = '''
/*
This stylesheet will be executed automatically by all pages.
To import more scripts, go in quaint.json and add them to the resources.files list.

A script can be imported on a per-page basis with this statement:
resources :: script.js
*/
'''



resolver = PluginResolver{false}

async install-plugin{name} =
   real-name = if{R"^(quaint-|\.|/)"? name, name, 'quaint-{name}'}
   try:
      {real-name, resolver.r{real-name}}
   catch e when e.code === "MODULE_NOT_FOUND":
      print 'Package {chalk.bold{real-name}} is not installed locally. Installing...'
      if not fs.exists-sync{"package.json"}:
         fs.write-file-sync{"package.json", "{}"}
      result = child_process.spawn-sync{"npm", {"install", real-name, "--save"}}
      match result.status:
         0 ->
            print result.stdout.to-string{}
            {real-name, resolver.r{real-name}}
         1 ->
            print result.stderr.to-string{}
            print 'Could not install {chalk.bold{real-name}}.'
            {real-name, null}


async setup-plugin{name, config, instructions} =
   {real-name, plugin} = await install-plugin{name}
   if plugin:
      simple-name = name.replace{R"^quaint-", ""}
      if plugin.quaint-setup:
         config.plugins[simple-name] or= {=}
         await plugin.quaint-setup{config, instructions}
         print 'Plugin {chalk.bold{name}} successfully configured!'
      elif resolver.rn{'{real-name}/quaint-setup'} as qsetup:
         config.plugins[simple-name] or= {=}
         await qsetup{config, instructions}
         print 'Plugin {chalk.bold{name}} successfully configured!'
      else:
         print 'Using plugin {chalk.bold{name}}'
         config.plugins[simple-name] or=
            plugin.quaint-default-config or {=}


default-config = {
   content-root = null
   sources = null
   files = null
   templates = {
      root = null
      default = null
   }
   output = null
   resources = {
      root = null
      files = {=}
   }
   hostname = null
   site-root = null
   server = {
      enable = null
      start-page = "index.html"
      port = 9137
   }
   watch = null
   plugins = {=}
}

async setup{var config = null
            var instructions = null} =

   config or= clone{default-config}
   instructions or= {}

   ;;;;;;;;;;;;;;;;;
   ;; Directories ;;
   ;;;;;;;;;;;;;;;;;

   if not config.content-root:
      content-root = await inq.input{"Source directory:", {default = .content}}
      config &: {
         = content-root
         sources = {"**/*.q"}
      }
      instructions.push with #mkdir{content-root}

   if not config.output:
      output = await inq.input{"Output directory:", {default = .output}}
      config.output = output
      instructions.push with #mkdir{output}

   if not config.templates.root:
      template-root = await inq.input{"Template directory:", {default = .templates}}
      config.templates.root = template-root
      instructions.push with #mkdir{template-root}

   if not config.files:
      assets-root = await inq.input with
         "Assets directory (source subdirectory):"
         {default = .assets}
      config.files = {assets-root}
      instructions.push with #mkdir{path.join{config.content-root, assets-root}}

   if not config.resources.root:
      resources-root = await inq.input with
         "Resources directory (output subdirectory):"
         {default = .resources}
      config.resources.root = resources-root

   ;;;;;;;;;;;;;;
   ;; hostname ;;
   ;;;;;;;;;;;;;;

   if not config.hostname:
      hostname = await inq.input with
         "Where will the pages be hosted?"
         {default = "http://localhost"}
      config &:
         match hostname:
            R"^([a-z]+://)?([^/]+)/?(.*)$"! {_, protocol, host, match root} ->
               do: let hostname = [protocol or "http://"] + host
               false? -> {= hostname, site-root = "/"}
               R"/$"? -> {= hostname, site-root = root}
               else -> {= hostname, site-root = root + "/"}

   ;;;;;;;;;;;;;;;;;;;;;;;
   ;; Configure plugins ;;
   ;;;;;;;;;;;;;;;;;;;;;;;

   install = await inq.confirm{"Install plugins?", {default = true}}

   if install:
      url = "http://breuleux.github.io/quaint/plugins/index.html"
      print '\nYou can consult the plugin list at this address:'
      print chalk.bold.cyan{url}

      while true:
         print ""
         name = await inq.input{"Install plugin (<Enter> to finish):"}
         if name.trim{} === "":
            print "\nDone installing plugins."
            break
         await setup-plugin{name, config, instructions}
   
   ;;;;;;;;;;;;;
   ;; Create? ;;
   ;;;;;;;;;;;;;

   recipes = {
      'index.q' => {
         dir = config.content-root
         message = "a page to start with"
         value = scaffold-index
      }
      'default.q' => {
         dir = config.templates.root
         message = "a template"
         value = scaffold-template
      }
      'style.css' => {
         dir = config.content-root
         message = "a global stylesheet"
         value = scaffold-style
         resources = {"style.css"}
      }
      'script.js' => {
         dir = config.content-root
         message = "a global script"
         value = scaffold-script
         resources = {"script.js"}
      }
   }

   config.templates.default or= "@minimal"

   items{recipes} each {key, value} ->
      p = path.join{value.dir, key}
      if fs.exists-sync{p}:
         continue
      result = await inq.confirm with
         'Do you want me to create {value.message}: {p}?'
         {default = true}
      if result:
         var text = value.value
         if key === "default.q":
            result2 = await inq.confirm with
               "Do you want to use it as a default template?"
               {default = true}
            text = text.replace{"@minimal", config.templates.default}
            if result2:
               config.templates.default = key.replace{R".q$", ""}
         instructions.push with #write{p, text}
         [value.resources or {}] each f ->
            config.resources.files[f] = f

   if config.watch === null:
      config.watch = await inq.confirm with
         'Should the quaint command watch by default?'
         {default = true}

   if config.watch and config.server.enable === null:
      serve = await inq.confirm with
         'Should the quaint command start a server by default?'
         {default = true}
      config.server.enable = serve
      if serve:
         print 'The server port is {chalk.bold{config.server.port}}.'

   {= config, = instructions}
