
require:
   child_process
   .index as quaint
   module
   quasar -> deprox
   path
   chalk
   "./config" ->
      merge-config
   fs
   .plugins/common ->
      analyze-path
   "engage" ->
      EngageMessage as M
   lodash

require-macros:
   engage -> task

provide:
   main
   PluginResolver
   resolver


;;;;;;;;;;;;;;;
;; Utilities ;;
;;;;;;;;;;;;;;;

cli-error{msg, fn} =
   try:
      fn{}
   catch e:
      throw E.cli-error{msg, e}

json-parse{filename, contents} =
   cli-error{'Error parsing JSON in {filename}'} with ->
      JSON.parse{contents}


var _server = null


;;;;;;;;;;;;;;;;;;;;;;;
;; Plugin resolution ;;
;;;;;;;;;;;;;;;;;;;;;;;

class PluginResolver:

   constructor{@use-global = true} =
      @m = @module-here{}
      @added-global-path = false

   module-here{} =
      m = new module{}
      m.filename = process.cwd{}
      c = process.cwd{}.split{"/"}
      m.paths = xs.reverse{} where xs = [1..c.length] each i ->
         c[...i].join{"/"} + "/node_modules"
      ;; Push global npm path
      if @use-global:
         m.paths.push with
            "/usr/local/lib/node_modules"
            "/usr/lib/node_modules"
      m

   r{p} =
      x = module._load{p, @m, true}
      x??.quaint-plugin or x

   rn{p} =
      try:
         module._load{p, @m, true}
      catch e:
         null

   r2{name} =
      if @added-global-path or not @use-global:
         @r{name}
      else:
         try:
            @r{name}
         catch e:
            ;; If all else fails (this is a bit slow, which is why we don't do it
            ;; if we don't have to)
            @m.paths.push with
               child_process.spawn-sync{"npm", {.root, "-g"}}.stdout.to-string{}.trim{}
            @added-global-path = true
            @r{name}

   try-require{orig, match names, all = names} =
      {} ->
         rqs = [all each name -> '"{name}"'].join{", "}
         throw E.cli-error with
            'Could not find a plugin for "{orig}". I tried requiring the following modules: {rqs}.\nIf they are available on npm, you can install them locally or globally, then try again.'
      {name, *rest} ->
         try:
            @r2{name}
         catch e:
            if e.message == 'Cannot find module \'{name}\'':
               @try-require{orig, rest, all}
            else:
               throw e
               ;; throw E.cli-error with
               ;;    'An error happened when loading module \'{name}\''
               ;;    e

resolver = PluginResolver{}


task resolve-plugin{name, deprox! arg} =
   cfg = config{}
   if arg in {null, false, undefined}:
      return null
   if arg === true:
      @log{'  Plugin {chalk.bold.magenta{name}} with no options'}
   else:
      max-length = 255
      opts0 = JSON.stringify{arg}
      opts = if{opts0.length < 255, opts0, opts0.slice{0, 252} + "..."}
      @log{'  Plugin {chalk.bold.magenta{name}} with options: {opts}'}
   pack = match name:
      R"^\."? ->
         resolver.try-require{name, {name}}
      else ->
         resolver.try-require{name, {'quaint-{name}', name}}
   match arg:
      === true ->
         pack
      options ->
         pack with arg & {
            read-file{x} =
               @log{'Resource {chalk.bold.magenta{x}}'}
               @get-from{x, cfg.content-root}.text
         }

   ;; if{arg === true, pack, pack{arg}}

normalize-qname{match t} =
   R"^@|.q$"? or false? ->
      t
   else ->
      t + ".q"

task config{} =
   if @config._config-exists:
      merge-config with
         JSON.parse{@get{"quaint.json"}.text}
         @argv
   else:
      @config


task common-data{} =
   cfg = config{}
   data = clone{cfg.data}
   cfg.data-files each
      String? file and field is null or items! {{field, file}} ->
         data2 = json-parse{'file {file.path}', @get{file}.text}
         if field:
            data[field] = data2
         else:
            data &: data2
   data

task compile{file, template-root} =
   cfg = config{}
   base = file.base-directory??{} or "."
   dest =
      if file.is-eval:
         {path = file.path}
      else:
         @rename-out{file, extension = ".html"}

   ;; Compute paths to add to meta object
   sr = path.join{"/", cfg.site-root}
   rr = cfg.resources.root or ""
   base-dest = path.dirname{dest.path}
   rel = path.relative{cfg.actual-output or base-dest, base-dest}
   basename = path.basename{dest.path}
   rrel = path.relative{rel, rr} or "."
   meta = {
      hostname = cfg.hostname
      url = cfg.hostname + path.join{sr, rel, basename}
      path = path.join{rel, basename}
      orig-path = path.relative{cfg.content-root, file.path}
      local-url = path.join{sr, rel, basename}
      site-root = sr
      site-rel = path.relative{rel, ""} or "."
      resource-root = path.join{sr, rr}
      resource-rel = rrel
   }

   @log with M{.begin, chalk.bold{'Compile -- {chalk.yellow{file.path}}'}} &: {eager = true}
   plugins = items{cfg.plugins} each {name, arg} ->
      if resolve-plugin{name, arg} as plugin:
         plugin
      else:
         continue
   q = quaint{}
   items{meta} each {k, v} ->
      q.documents.meta.set{k, v}

   q.register-resolvers with {
      default{filename, options} =
         f2 =
            if filename.starts-with{"/"}:
               @get{filename}
            else:
               base.get{filename}
         if f2.exists{}:
            if options.read:
               @log with 'Resource {chalk.bold.magenta{f2.path}}'
         else:
            @log with 'Resource {chalk.bold.red{f2.path}} (does not exist)'
            throw E.no-resource{'Resource does not exist: {f2.path}'}
         if not options.read:
            {file and path = f2.path}
         else:
            {file and path = f2.path, contents and text = f2.text}
      plugin{name} =
         resolve-plugin{name, true}
      template{normalize-qname! filename} =
         @log with 'Template {chalk.bold.magenta{filename}}'
         if not template-root:
            throw E.no-template-root{"The template directory was not specified."}
         f2 = template-root.get{filename}
         {file and path = f2.path, contents and text = f2.text}
   }

   q.template = cfg.templates.default
   q.setenv{common-data{}}
   q.plug{*plugins}

   items{cfg.resources.files} each {name, file} ->
      data = analyze-path{file}
      if data.path and not data.path-is-url and not file.starts-with{"/"}:
         data.full-path = @get{cfg.content-root}.get{data.path}.path
      q.register-resources with {name => data}

   res = q.translate{file.text, cfg.format} with
      resources = {
         root and url = path.join{cfg.actual-output, cfg.resources.root}
         url = rrel
      }
   res.meta = object with
      q.documents.meta.entries{} each {k, match v} ->
         quaint.QAst? -> {k, v.raw{}}
         else -> {k, v}

   out-path = path.join{cfg.actual-output, res.meta.path}
   @log with '  Output {chalk.bold.green{out-path}}'
   @log with M{.end, ""}
   res

;; DONE: help format data plugin out
;;       template save-meta verbose
;; TODO: config eval stdout save-config dump-data


task write-it{name, contents} =
   @log with '   Write {chalk.green{name}}'
   @get{name}.write{contents}

task copy-it{name, source, transforms} =
   @log with '    Copy {source}'
   @log with '    ---> {chalk.green{name}}'
   src = @get{source}
   dest = @get{name}
   if not transforms or transforms.length === 0:
      src.copy{to = name}
   else:
      contents =
         transforms.reduce{f, src.text} where
            f{x, t} = t.transform{x, src.path, file -> @get{file}}
      dest.write{contents}

task main{root} =

   cfg = config{}
   template-root = cfg.templates.root and @get{cfg.templates.root}
   var sources-exist = false
   meta = {=}
   resources = {=}

   ;; PRE-RESOLVE PLUGINS
   ;; I put this here so that the plugin info is printed out before
   ;; compiling the Quaint files

   @log with M{.begin, chalk.bold{"Resolve global plugins"}}
   plugins =
      items{cfg.plugins} each {name, arg} ->
         resolve-plugin{name, arg}
   @log with M{.end, ""}

   ;;;;;;;;;;;;;;;;;;;;;
   ;; COMPILE SOURCES ;;
   ;;;;;;;;;;;;;;;;;;;;;

   sources =
      if cfg._eval:
         {{
             is-eval = true
             path = "@eval"
             text and contents = cfg._eval
         }}
      else:
         consume{root.find{* cfg.sources}}

   if cfg._print and sources.length > 1:
      throw E.quaint.multiple-files with
         "-s option cannot be used with multiple files."

   sources each file ->
      sources-exist = true
      results = compile{file, template-root}
      if cfg._print:
         print results.contents
      else:
         ;; dest = @rename-out{file, extension = ".html"}
         out-path = path.join{cfg.actual-output, results.meta.path}
         dest = @get{out-path}
         dest.write{results.contents}
      resources &: results.files
      meta[path.relative{root.path, file.path}] = results.meta

   ;;;;;;;;;;;;;;;;;;;;;;;;
   ;; PLUGIN POSTPROCESS ;;
   ;;;;;;;;;;;;;;;;;;;;;;;;

   plugins each plugin when plugin.postprocess ->
      resources &: plugin.postprocess{cfg, meta, resources}

   ;;;;;;;;;;;;;;;;;;;;
   ;; COPY RESOURCES ;;
   ;;;;;;;;;;;;;;;;;;;;

   @log with M{.begin, chalk.bold{"Resources"}}
   items{resources} each {name, match} ->
      do:
         sources-exist = true
      #write{contents} ->
         write-it{name, contents}
      #copy{source, transforms = null} ->
         copy-it{name, source, transforms}

   ;;;;;;;;;;;;;;;;;
   ;; COPY ASSETS ;;
   ;;;;;;;;;;;;;;;;;

   root.find{* cfg.files} each file ->
      sources-exist = true
      dest = @rename-out{file}
      copy-it{dest.path, file.path}
   @log with M{.end, ""}

   ;;;;;;;;;;;;;;;
   ;; SAVE META ;;
   ;;;;;;;;;;;;;;;

   if not sources-exist:
      @log{"Nothing to do."}
   elif cfg.save-meta:
      @get{cfg.save-meta}.write{JSON.stringify{meta, null, 2}}
      @log with 'Saved the meta information in {chalk.bold{cfg.save-meta}}'
   elif cfg.meta??.file:
      new-meta =
         match cfg.meta.sort-by:
            R"^-(.*)"! {_, field} ->
               x = lodash.sort-by{items{meta}} with {{k, v}} -> v[field]
               object with x.reverse{}
            String? field ->
               object with lodash.sort-by{items{meta}} with {{k, v}} -> v[field]
            else ->
               meta
      @get{cfg.meta.file}.write{JSON.stringify{new-meta, null, 2}}
      @log with 'Saved the meta information in {chalk.bold{cfg.meta.file}}'
