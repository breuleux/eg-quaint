
require:
   /html
   path

provide:
   AppendInjector
   HTMLFormatter


class AppendInjector:

   constructor{@tag} =
      @inject = @_inject.bind{@}

   matches{node} =
      [^[@tag] %]? node

   make-node{data} =
      result = match {data.type, data.inline}:
         {.js, === true} ->
            script[raw] %
               type = "text/javascript"
               data.contents
         {.js, === false} ->
            script %
               type = "text/javascript"
               async = data.async or false
               defer = data.defer or false
               src = data.dest-url
         {.css, === true} ->
            style[raw] %
               data.contents
         {.css, === false} ->
            link %
               rel = .stylesheet
               type = "text/css"
               href = data.dest-url
         else ->
            throw E.bad-resource-type{'Cannot include resources of type "{data.type}"'}
      if data.id:
         result.props.id = data.id
      if data.class:
         result.props.class = data.class
      result

   inject-node{root, node} =
      var candidates = {root}
      while candidates.length > 0:
         c = candidates.shift{}
         if @matches{c}:
            c.children.push{node}
            return true
         match c:
            ENode? ->
               candidates ++= c.children
            Array? ->
               candidates ++= c
            else ->
               pass
      false

   _inject{root, data} =
      @inject-node{root, @make-node{data}}


defaults = {
   root = "."
   url = "."
   inline = false
}


class HTMLFormatter:

   constructor{@engine} =
      @injectors = {
         head = AppendInjector{.head}
         body = AppendInjector{.body}
      }
      @transformers = {=}

   register-injectors{injectors} =
      @injectors &: injectors

   register-transformers{transformers} =
      items{transformers} each {type, tr} ->
         @transformers[type] or= {=}
         @transformers[type] &: tr

   expand-components{match node} =
      ENode? {=> tags, => props, => children} ->
         tags each tag ->
            if @engine.components[tag] as rule:
               x-tags = tags each t when t !== tag -> t
               try:
                  return rule{x-tags, props, @expand-components{children}}
               catch e:
                  return
                     .error %
                        'Error when expanding component "{tag}"'
                        div.error-stack % e.stack
         ENode{tags, props, @expand-components{children}}
      Array? a ->
         a each x -> @expand-components{x}
      else ->
         node

   format{enode >> @expand-components{enode}
          resources
          options >> [defaults & options]} =
      files = {=}
      items{resources} each {path0, clone! var data} ->
         data.transforms = {}

         orig-path = data.path
         path-is-url = data.path-is-url
         if not path-is-url:
            data.dest = path.join{options.root, path0}
         embeddable = data.type !== null
         data.inline = embeddable and data.inline or options.inline

         if path-is-url:
            data.dest-url = data.path
         else:
            data.dest-url = path.join{options.url, path0}

         while.outer true:
            type = data.type
            items{@transformers[type or ""]} each {_, transformer} ->
               data = transformer{data}
               if data.transform:
                  data.transforms.push{data.transform}
               if type !== data.type:
                  continue outer
            break

         if data.inline and data.contents === true:
            data.contents = @engine.read-resource-contents{.resource, data.path}
            [data.transforms or {}] each t ->
               data.contents = t.transform{data.contents, data.full-path} with
                  file -> @read-resource{.resource, file}

         if embeddable:
            match data.method:
               String? s ->
                  @injectors[s].inject{enode, data}
               Function? f ->
                  f{enode, data}
               else ->
                  throw E.HTMLFormatter.method with
                     'method for injection must be a String or a Function'

         if not data.inline and not path-is-url:
            if data.contents !== null:
               files[data.dest] =
                  if data.contents === true:
                     #copy{data.full-path or orig-path, data.transforms or {}}
                  else:
                     #write{data.contents}
         items{data.dependencies or {=}} each {p, src} ->
            files[path.join{options.root, p}] = src

      ;; parts = @engine.documents.head.entries{}
      ;; if parts.length > 0:
      ;;    @injectors.head.inject-node{enode, parts}

      {html{enode}, files}


