
requireMacros:
   "earl-mocha" ->
      describe, it, before, after
      assert, asserts

require:
   "../src/lang" ->
      parse
      QAst, Text, Oper, Seq
   "../src/tools" ->
      extractor, parseSpec
   "../src/util" ->
      insertSorted, group, transform
   "../src/doc" ->
      comparePaths


describe "transform":
   it "works":
      fn{*match} =
         {String? s, String? t} ->
            #replace{s + t}
         {x, Array? a} ->
            #splice{*a}
         {x, y} ->
            #push{y}
      xs = {"a", "b", {"c", 1, "d", 2}, {"e", "f"}, "g"}
      assert transform{xs, fn, ""} == {"abc", 1, "d", 2, "efg"}
   asserts:
      group{{}, x -> x} == {}
      group{1..5, {x} -> x mod 3} ==
         {{1, 1}, {2, 2}, {0, 3}, {1, 4}, {2, 5}}
      group{1..5, {x} -> x mod 3 == 0} ==
         {{false, 1, 2}, {true, 3}, {false, 4, 5}}


describe "misc":

   compare{match a, b} =
      > b -> 1
      < b -> -1
      else -> 0

   assertSorted{neighbours! xs each {x, y}} =
      assert x <= y

   it "insert sorted":
      xs = {}
      1..100 each i -> insertSorted{xs, Math.random{} * 10, compare}
      assertSorted{xs}
      ;; could fail if two random numbers come up the same. I'd like to see that happen
      assert xs.length == 100

   it "insert sorted (duplicates)":
      xs = consume{0..9}
      1..100 each i -> insertSorted{xs, [Math.random{} * 10] // 1, compare}
      assert xs == consume{0..9}

   asserts "compare paths":
      comparePaths{{1}, {2}} == -1
      comparePaths{{2}, {1}} == 1
      comparePaths{{1}, {1}} == 0
      comparePaths{{1, 2}, {1}} == 1
      comparePaths{{10}, {9}} == 1
      comparePaths{{93, 8, 4, 11}, {93, 9, 3, 10, 73}} == -1
      comparePaths{{93, 8, 4, 11}, {93, 8, 4, 11}} == 0




describe "extractor":

   it "simple extractor":
      ex = extractor{"\\x = \\y"}
      assert ex{parse{"hello = world"}} ==
         {x = Text{"hello"}, y = Text{"world"}}
      assert ex{parse{"hello=world"}} ==
         {x = Text{"hello"}, y = Text{"world"}}
      assert not ex{parse{"hello ="}}
      assert not ex{parse{"= world"}}
      assert not ex{parse{"hello ++ world"}}

   it "multiple matchers":
      ex = extractor{"\\x = \\y", "\\zz ++ \\qq"}
      assert ex{parse{"hello = world"}} ==
         {x = Text{"hello"}, y = Text{"world"}}
      assert ex{parse{"hello ++ world"}} ==
         {zz = Text{"hello"}, qq = Text{"world"}}

   it "optional arguments":
      ex = extractor{"\\maybe\\x = \\maybe\\y"}
      assert ex{parse{"hello = world"}} ==
         {x = Text{"hello"}, y = Text{"world"}}
      assert ex{parse{"hello="}} ==
         {x = Text{"hello"}, y = Text{""}}
      assert ex{parse{"=world"}} ==
         {x = Text{""}, y = Text{"world"}}

   it "literals":
      ex = extractor{"zazz :: \\x"}
      assert not ex{parse{"a :: b"}}
      assert ex{parse{"zazz :: b"}} == {x = Text{"b"}}

   moreSpecific{parseSpec! {_, _, s1}, parseSpec! {_, _, s2}} =
      s1 > s2

   asserts "specificity":
      moreSpecific{"x = y", "x = \\y"}
      moreSpecific{"x = y", "\\x = y"}
      moreSpecific{"x = y :: z", "x = y"}
      moreSpecific{"x = y", "\\x = \\y :: \\z"}
      moreSpecific{"\\x = \\y :: \\z", "\\x = \\y"}


   ;; it "simple extractor":
   ;;    ex = extractor{"x = y"}
   ;;    assert ex{parse{"hello = world"}} ==
   ;;       {x = Text{"hello"}, y = Text{"world"}}
   ;;    assert ex{parse{"hello=world"}} ==
   ;;       {x = Text{"hello"}, y = Text{"world"}}
   ;;    assert not ex{parse{"hello ="}}
   ;;    assert not ex{parse{"= world"}}
   ;;    assert not ex{parse{"hello ++ world"}}

   ;; it "multiple matchers":
   ;;    ex = extractor{"x = y", "zz ++ qq"}
   ;;    assert ex{parse{"hello = world"}} ==
   ;;       {x = Text{"hello"}, y = Text{"world"}}
   ;;    assert ex{parse{"hello ++ world"}} ==
   ;;       {zz = Text{"hello"}, qq = Text{"world"}}

   ;; it "optional arguments":
   ;;    ex = extractor{"[maybe x] = [maybe y]"}
   ;;    assert ex{parse{"hello = world"}} ==
   ;;       {x = Text{"hello"}, y = Text{"world"}}
   ;;    assert ex{parse{"hello="}} ==
   ;;       {x = Text{"hello"}, y = Text{""}}
   ;;    assert ex{parse{"=world"}} ==
   ;;       {x = Text{""}, y = Text{"world"}}


;; shed
